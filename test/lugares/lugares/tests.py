import time
from datetime import date, datetime
from sloth.test import ServerTestCase
from .models import Pais, Estado, Cidade, Pessoa

class TestCase(ServerTestCase):

    def setUp(self):
        self.create_user('admin', '123', True)
        pais = Pais.objects.create(nome='Brasil')
        estado = Estado.objects.create(nome='Rio Grande do Norte', pais=pais)
        cidade = Cidade.objects.create(nome='Natal', estado=estado)
        Pessoa.objects.create(nome='João', cidade=cidade, data_nascimento=date.today(), sexo='M')
        Pessoa.objects.create(nome='Maria', cidade=cidade, data_nascimento=date.today(), sexo='F')

    def _test_api(self):
        self.login('admin', '123')
        response = self.get('/api/dashboard/lugares/pais/')
        for name in ['id', 'nome', 'get_total_estados']: self.assertIn(name, response[0])
        response = self.get('/api/dashboard/lugares/pais/1/')
        for name in ['get_dados_gerais', 'get_estados']: self.assertIn(name, response)
        response = self.get('/api/dashboard/lugares/pais/1/get_dados_gerais/')
        for name in ['nome']: self.assertIn(name, response)
        response = self.get('/api/dashboard/lugares/pais/1/get_estados/')
        for name in ['id', 'nome']: self.assertIn(name, response[0])
        response = self.get('/api/dashboard/lugares/pais/1/get_estados/1/')
        for name in ['get_dados_gerais', 'get_cidades']: self.assertIn(name, response)
        response = self.get('/api/dashboard/lugares/pais/1/get_estados/1/get_dados_gerais/')
        for name in ['nome']: self.assertIn(name, response)
        response = self.get('/api/dashboard/lugares/pais/1/get_estados/1/get_cidades/1/')
        for name in ['get_dados_gerais', 'get_habitantes']: self.assertIn(name, response)
        response = self.get('/api/dashboard/lugares/pais/1/get_estados/1/get_cidades/1/get_habitantes')
        for name in ['get_homens', 'get_mulheres']: self.assertIn(name, response)
        response = self.get('/api/dashboard/lugares/pessoa/')
        for name in ['homens', 'mulheres']: self.assertIn(name, response)

    def _test_meta(self):
        self.login('admin', '123')
        response = self.get('/meta/dashboard/lugares/pais/')
        self.assertEquals(response['type'], 'queryset')
        self.assertEquals(response['name'], 'Países')
        response = self.get('/meta/dashboard/lugares/pais/1/')
        self.assertEquals(response['type'], 'object')
        self.assertEquals(response['name'], 'Brasil')
        self.assertEquals(response['data']['get_dados_gerais']['type'], 'fieldset')
        self.assertEquals(response['data']['get_dados_gerais']['path'], '/meta/dashboard/lugares/pais/1/get_dados_gerais/')
        self.assertEquals(response['data']['get_estados']['type'], 'queryset')
        self.assertEquals(response['data']['get_estados']['path'], '/meta/dashboard/lugares/pais/1/get_estados/')
        response = self.get('/meta/dashboard/lugares/pais/1/get_dados_gerais/')
        self.assertEquals(response['type'], 'object')
        self.assertEquals(response['name'], 'Brasil')
        self.assertEquals(response['data']['get_dados_gerais']['type'], 'fieldset')
        self.assertEquals(response['data']['get_dados_gerais']['path'], '/meta/dashboard/lugares/pais/1/get_dados_gerais/')
        response = self.get('/meta/dashboard/lugares/pais/1/get_estados/')
        self.assertEquals(response['type'], 'object')
        self.assertEquals(response['name'], 'Brasil')
        self.assertEquals(response['data']['get_estados']['type'], 'queryset')
        self.assertEquals(response['data']['get_estados']['path'], '/meta/dashboard/lugares/pais/1/get_estados/')
        response = self.get('/meta/dashboard/lugares/pais/1/get_estados/1/')
        self.assertEquals(response['type'], 'object')
        self.assertEquals(response['name'], 'Rio Grande do Norte')
        self.assertEquals(response['data']['get_dados_gerais']['type'], 'fieldset')
        self.assertEquals(response['data']['get_dados_gerais']['path'], '/meta/dashboard/lugares/pais/1/get_estados/1/get_dados_gerais/')
        self.assertEquals(response['data']['get_cidades']['type'], 'queryset')
        response = self.get('/meta/dashboard/lugares/pais/1/get_estados/1/get_dados_gerais/')
        self.assertEquals(response['type'], 'object')
        self.assertEquals(response['name'], 'Rio Grande do Norte')
        self.assertEquals(response['data']['get_dados_gerais']['type'], 'fieldset')
        self.assertEquals(response['data']['get_dados_gerais']['path'], '/meta/dashboard/lugares/pais/1/get_estados/1/get_dados_gerais/')
        response = self.get('/meta/dashboard/lugares/pais/1/get_estados/1/get_cidades/')
        self.assertEquals(response['type'], 'object')
        self.assertEquals(response['name'], 'Rio Grande do Norte')
        self.assertEquals(response['data']['get_cidades']['type'], 'queryset')
        self.assertEquals(response['data']['get_cidades']['path'], '/meta/dashboard/lugares/pais/1/get_estados/1/get_cidades/')
        response = self.get('/meta/dashboard/lugares/pais/1/get_estados/1/get_cidades/1/')
        self.assertEquals(response['type'], 'object')
        self.assertEquals(response['name'], 'Natal')
        self.assertEquals(response['data']['get_habitantes']['type'], 'fieldset-list')
        self.assertEquals(response['data']['get_habitantes']['path'], '/meta/dashboard/lugares/pais/1/get_estados/1/get_cidades/1/get_habitantes/')
        self.assertEquals(response['data']['get_habitantes']['data']['get_homens']['type'], 'queryset')
        self.assertEquals(response['data']['get_habitantes']['data']['get_homens']['path'], '/meta/dashboard/lugares/pais/1/get_estados/1/get_cidades/1/get_habitantes/get_homens/')
        self.assertEquals(response['append']['right']['get_total_pessoas_por_sexo']['type'], 'statistics')
        self.assertEquals(response['append']['right']['get_total_pessoas_por_sexo']['path'], '/meta/dashboard/lugares/pais/1/get_estados/1/get_cidades/1/get_total_pessoas_por_sexo/')
        self.assertEquals(response['append']['right']['get_total_pessoas_por_sexo']['template'], 'charts/donut.html')
        self.assertEquals(response['append']['right']['get_total_pessoas_casadas']['type'], 'statistics')
        self.assertEquals(response['append']['right']['get_total_pessoas_casadas']['path'], '/meta/dashboard/lugares/pais/1/get_estados/1/get_cidades/1/get_total_pessoas_casadas/')
        self.assertEquals(response['append']['right']['get_total_pessoas_casadas']['template'], 'charts/column.html')
        self.assertEquals(response['attach'][0]['name'], 'Estatisticas')
        response = self.get('/meta/dashboard/lugares/pessoa/')
        self.assertEquals(response['type'], 'object')
        self.assertEquals(response['name'], 'Pessoas')
        self.assertEquals(response['data']['homens']['type'], 'queryset')
        self.assertEquals(response['data']['homens']['path'], '/meta/dashboard/lugares/pessoa/homens/')
        self.assertEquals(response['data']['mulheres']['type'], 'queryset')
        self.assertEquals(response['data']['mulheres']['path'], '/meta/dashboard/lugares/pessoa/mulheres/')
        self.assertEquals(response['append']['right']['get_total_por_sexo']['type'], 'statistics')
        self.assertEquals(response['append']['right']['get_total_por_sexo']['path'], '/meta/dashboard/lugares/pessoa/get_total_por_sexo/')
        self.assertEquals(response['append']['right']['get_total_casadas']['type'], 'statistics')
        self.assertEquals(response['append']['right']['get_total_casadas']['path'], '/meta/dashboard/lugares/pessoa/get_total_casadas/')
        self.assertEquals(response['attach'][0]['name'], 'Total por Sexo Casado')
        self.assertEquals(response['attach'][0]['path'], '/meta/dashboard/lugares/pessoa/get_total_por_sexo_casado/')

    def _test_dashboard(self):
        self.login('admin', '123')
        # Testing assyncronous info in the dashboard
        response = self.get('/api/dashboard/')
        for name in ['get_estados', 'get_indicadores']: self.assertIn(name, response)
        self.assertIsNone(response['get_indicadores'])

        start = datetime.now()
        response = self.get('/api/dashboard/get_indicadores')
        end = datetime.now() - start
        # print(end.seconds, 'seconds')
        self.assertGreater(end.seconds, 2)
        self.assertEqual(len(response), 2)

        start = datetime.now()
        response = self.get('/api/dashboard/get_indicadores')
        end = datetime.now() - start
        # print(end.seconds, 'seconds')
        self.assertLess(end.seconds, 1)
        self.assertEqual(len(response), 2)

    def test(self):
        self._test_api()
        self._test_meta()
        self._test_dashboard()
